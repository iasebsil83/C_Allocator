#!/bin/bash




# -------- DEFINITIONS --------

#current executable directory
CXD=$(dirname $(readlink -f $0))
pCXD=$(dirname $CXD)

#C compiler
export CC=gcc

#tmp dir
TMP=$pCXD/out/tmp






# -------- PREPARATIONS --------

#clean
$CXD/clean

#remove previous blds
rm --force $pCXD/out/run $pCXD/out/allocator.so $pCXD/out/liballocator.so

#tmp dir
[[ ! -d $TMP ]] && mkdir --parents $TMP






# -------- SHORTER CMD --------

#compile from C to obj ($1:output file name, $2:C file)
function c_to_obj() {
	output=$1
	srcC=$2

	#cc
	cmd="$CC -nostdlib "
	echo "$CC -nostdlib  \\"
	#cmd+="-ffreestanding "
	#echo "-ffreestanding \\"
	cmd+="-c -fPIC       "
	echo "-c -fPIC       \\"
	cmd+="    $srcC"
	echo "    $srcC"
	echo
	$cmd || exit $?

	#rename output
	cmd="mv $(basename ${srcC%%.*}.o) $output"
	echo "mv $(basename ${srcC%%.*}.o) $output"
	echo
	$cmd || exit $?
}



#compile from obj to shared obj ELF  ($1:output file name, $2:obj file, [$3:additionnal asm file])
function obj_to_soELF() {
	output=$1
	srcObj=$2
	srcAsm=$3

	#cc
	cmd="$CC -nostdlib "
	echo "$CC -nostdlib  \\"
	#cmd+="-ffreestanding "
	#echo "-ffreestanding \\"
	cmd+="-shared        "
	echo "-shared        \\"
	cmd+="    $srcObj "
	echo "    $srcObj \\"
	cmd+="    $srcAsm "
	echo "    $srcAsm \\"
	cmd+="-o $output"
	echo "-o $output"
	echo
	$cmd || exit $?

	#also add "lib"...".so" alternative
	cmd="ln -s $(basename $output) $(dirname $output)/lib$(basename ${output%%.*}).so"
	echo -e "ln -s $(basename $output) $(dirname $output)/lib$(basename ${output%%.*}).so\n"
	$cmd || exit $?
}



#compile from obj to executable ELF  ($1:output file name, $2:obj file, $3:so file, [$4:additionnal asm file])
function obj_to_exeELF() {
	output=$1
	srcObj=$2
	l=$3
	srcAsm=$4

	#so notations
	l_short=$(basename ${l%%.*})
	l_dirPath=$(dirname $l)

	#cc
	cmd="$CC -nostdlib "
	echo "$CC -nostdlib \\"
	cmd+="    $srcObj "
	echo "    $srcObj \\"
	cmd+="    $srcAsm "
	echo "    $srcAsm \\"
	cmd+="-o $output "
	echo "-o $output \\"
	cmd+="-Wl,-rpath,$l_dirPath "
	echo "-Wl,-rpath,$l_dirPath \\"
	cmd+="-L$l_dirPath "
	echo "-L$l_dirPath \\"
	cmd+="-l$l_short"
	echo "-l$l_short"
	$cmd || exit $?
}






# -------- EXECUTION --------


#compile allocator
c_to_obj     $TMP/allocator.o       $pCXD/src/lib/allocator.c
obj_to_soELF $pCXD/out/allocator.so $TMP/allocator.o $pCXD/src/std/syscalls.s || exit 1

#compile demo prog
c_to_obj      $TMP/prog.o   $pCXD/src/prog.c
obj_to_exeELF $pCXD/out/run $TMP/prog.o $pCXD/out/allocator.so $pCXD/src/std/syscalls.s
